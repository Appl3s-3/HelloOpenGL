#extension GL_OES_standard_derivatives : enable

precision highp float;

// You're given these variables, everything above is required for this to run in the browser
uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

// Variables u can change
float scale = 3.0;
float speed = 10.0;
float shrink_dot = 0.9; // 0.0-1.0 (not inclusive), actually u can put in negative values too
float contrast = 1.0; // 0.0-1.

// Main function
// This function runs for every single fragment (pixel) on the screen
void main( void ) {
	// gl_FragCoord is a vec2 specifying the current fragment's coordinates
	
	// Create a vec2 to make the position slowly move right.
	// i.e
	// After 1 second (i believe time is in seconds), vec2(0, 0) will become vec2(1 * speed, 0)
	vec2 shift = vec2(gl_FragCoord.x + time * speed, gl_FragCoord.y);
	
	// U can remove this comment if u want
	//shrink_dot = 0.98 * max(0.0, gl_FragCoord.y / (resolution.y - resolution.y / 2.0));
	
	// Use the sin of shift to get values oscillating between 0 and 1
	// The sin acts on a scaled value (just think about this with the pixels as units)
	// Subtract a value to shrink the dots
	// Make everything below 0, 0 (max function)
	// Multiply the value by a certain amount to make the values go between 0.0-1.0
	float gain = max(0.0, (sin(shift.x / scale) * sin(shift.y / scale) - shrink_dot)) * (contrast / (1.0 - shrink_dot));
	
	// Multiply the gain with a colour. In the event that the gain is 0, 0.4 is added onto it, thus producing the darker colour
	vec3 out_c = (gain + 0.4) * vec3(0.1, 0.5, 0.6);
	// The final colour
	gl_FragColor = vec4(out_c, 1.0);
}